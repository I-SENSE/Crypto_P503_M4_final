


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.test1|,CODE, READONLY
    2 00000000         
    3 00000000                 EXPORT           multiply256x256_asm
    4 00000000         
    5 00000000         multiply256x256_asm
                               PROC
    6 00000000         
    7 00000000 B5F0            push             {r4-r7,lr}
    8 00000002 4643            mov              r3, r8      ; r3 = r8
    9 00000004 464C            mov              r4, r9      ; r4 = r9
   10 00000006 4655            mov              r5, r10     ; r5 = r10
   11 00000008 465E            mov              r6, r11     ; r6 = r11
   12 0000000A B47F            push             {r0-r6}     ; save r8-r11
   13 0000000C 4684            mov              r12, r0     ; r12 = r0 ( addsre
                                                            ss of the result ar
                                                            ray )
   14 0000000E 4692            mov              r10, r2     ; r10 = r2 ( addsre
                                                            ss of 2nd input arr
                                                            ay )
   15 00000010 468B            mov              r11, r1     ; r11 = r1 ( addsre
                                                            ss of 1st input arr
                                                            ay )
   16 00000012 4610            mov              r0,r2       ; r0 = r2 ( now r0 
                                                            is pointing to 2nd 
                                                            input array 1st add
                                                            sress )
   17 00000014         ;//ldm r0!, {r4,r5,r6,r7}
   18 00000014 C830            ldm              r0!, {r4,r5} ; load 2 first wor
                                                            d (32 bits ) - r4 =
                                                             input_2[0] , r5 = 
                                                            input_2[1] , r0 = &
                                                            input_2[2]
   19 00000016 3008            adds             r0,#8       ; now r0 = &input_2
                                                            [4]
   20 00000018 C9CC            ldm              r1!, {r2,r3,r6,r7} ; load 4 fir
                                                            st word of input_1 
                                                            - r2 = input_1[0] ,
                                                             r3 = input_1[1] ,r
                                                            6 = input_1[2] , r7
                                                             = input_1[3] ,r1 =
                                                             &input_1[4]
   21 0000001A B403            push             {r0,r1}     ; save current r0 a
                                                            nd r1 pointer r0 = 
                                                            &input_2[4]  r1 = &
                                                            input_1[4]
   22 0000001C         ;/////////BEGIN LOW PART //////////////////////
   23 0000001C         ; /////////MUL128/////////////
   24 0000001C         ;  //MUL64
   25 0000001C 462E            mov              r6, r5      ; r6 = r5 ??? why h
                                                            ave to change r6
   26 0000001E 4611            mov              r1, r2      ; r1 = r2 
   27 00000020 1B2D            subs             r5, r4      ; r5 = |r5 - r4| 
   28 00000022 4180            sbcs             r0,r0, r0   ; 
   29 00000024 4045            eors             r5, r0      ; 
   30 00000026 1A2D            subs             r5, r0      ; 
   31 00000028 1AC9            subs             r1, r3      ; r1 = |r1 - r3|
   32 0000002A 41BF            sbcs             r7, r7      ;
   33 0000002C 4079            eors             r1, r7      ;
   34 0000002E 1BC9            subs             r1, r7      ;



ARM Macro Assembler    Page 2 


   35 00000030 4047            eors             r7, r0      ; compare r7 and r0
                                                             | because they use
                                                             r7 and r0 as "sign
                                                            " later use I think
                                                             
   36 00000032 4689            mov              r9, r1      ;       // save the
                                                             r1 
   37 00000034 46A8            mov              r8, r5      ;       // save the
                                                             r5 
   38 00000036 FBA2 0104       umull            r0,r1,r2,r4 ; change this 
   39 0000003A FBA3 2306       umull            r2,r3,r3,r6 ; optimal for m4
   40 0000003E 4076            eors             r6, r6      ; r6 = r6 * r6 
   41 00000040 1852            adds             r2, r1      ; r2 = r2 + r1 
   42 00000042 4173            adcs             r3, r6      ; r3 = r3 + r6 
   43 00000044 4649            mov              r1, r9      ; r1 = r9     // ge
                                                            t back the saved va
                                                            lue of r1 
   44 00000046 4645            mov              r5, r8      ; r5 = r8     // ge
                                                            t back the saved va
                                                            lue of r5
   45 00000048 4680            mov              r8, r0      ; r8 = r0
   46 0000004A FBA1 1005       umull            r1,r0,r1,r5 ; optimal for m4
   47 0000004E 4079            eors             r1,r7       ; r1 = r1 xor r7 
   48 00000050 4078            eors             r0,r7       ; r0 = r0 xor x7 
   49 00000052 4064            eors             r4, r4      ; r4 = r4 xor r4 
   50 00000054 107F            asrs             r7, r7, #1  ; shift r7 right 1 
                                                            ( keep the sign )
   51 00000056 4151            adcs             r1, r2      ; r1 = r1 + r2 + C
   52 00000058 4142            adcs             r2, r0      ; r2 = r2 + r0 + C 
                                                              
   53 0000005A 4167            adcs             r7, r4      ; r7 = r7 + r4 + C
   54 0000005C 4640            mov              r0, r8      ; r0 = r8     // sa
                                                            ve the r0 
   55 0000005E 1809            adds             r1, r0      ; r1 = r1 + r0 
   56 00000060 415A            adcs             r2, r3      ; r2 = r2 + r3 + C
   57 00000062 417B            adcs             r3, r7      ; r3 = r3 + r7 + C
   58 00000064         ;//////////////////////////
   59 00000064 4664            mov              r4, r12     ; r4 = r12   // ini
                                                            tial addsress of ou
                                                            tput array 
   60 00000066 C403            stm              r4!, {r0,r1} ; load the value o
                                                            f r0, r1 to first 2
                                                             words into the out
                                                            put array 
   61 00000068 B410            push             {r4}        ; save the r4 
   62 0000006A B403            push             {r0,r1}     ; save the r1 and r
                                                            0 
   63 0000006C 4651            mov              r1, r10     ; r1 = r10    // ge
                                                            t the initial addsr
                                                            ess of input_2
   64 0000006E 4692            mov              r10, r2     ; r10 = r2    // I 
                                                            don't get this part
                                                             because r2 does no
                                                            t hold addsress any
                                                            more. 
   65 00000070 C933            ldm              r1, {r0, r1, r4, r5} ; load    
                                                              // load r1 with t
                                                            he value in r1 and 
                                                            now 



ARM Macro Assembler    Page 3 


   66 00000072 4622            mov              r2, r4
   67 00000074 462F            mov              r7, r5
   68 00000076 1A12            subs             r2, r0
   69 00000078 418F            sbcs             r7, r1
   70 0000007A 41B6            sbcs             r6, r6
   71 0000007C 4072            eors             r2, r6
   72 0000007E 4077            eors             r7, r6
   73 00000080 1B92            subs             r2, r6
   74 00000082 41B7            sbcs             r7, r6
   75 00000084 B484            push             {r2, r7}
   76 00000086 465A            mov              r2, r11
   77 00000088 469B            mov              r11, r3
   78 0000008A CA0F            ldm              r2, {r0, r1, r2, r3}
   79 0000008C 1A80            subs             r0, r2
   80 0000008E 4199            sbcs             r1, r3
   81 00000090 41BF            sbcs             r7, r7
   82 00000092 4078            eors             r0, r7
   83 00000094 4079            eors             r1, r7
   84 00000096 1BC0            subs             r0, r7
   85 00000098 41B9            sbcs             r1, r7
   86 0000009A 4077            eors             r7, r6
   87 0000009C 46BC            mov              r12, r7
   88 0000009E B403            push             {r0, r1}
   89 000000A0         ;//MUL64
   90 000000A0 462E            mov              r6, r5
   91 000000A2 4611            mov              r1, r2
   92 000000A4 1B2D            subs             r5, r4
   93 000000A6 4180            sbcs             r0, r0
   94 000000A8 4045            eors             r5, r0
   95 000000AA 1A2D            subs             r5, r0
   96 000000AC 1AC9            subs             r1, r3
   97 000000AE 41BF            sbcs             r7, r7
   98 000000B0 4079            eors             r1, r7
   99 000000B2 1BC9            subs             r1, r7
  100 000000B4 4047            eors             r7, r0
  101 000000B6 4689            mov              r9, r1
  102 000000B8 46A8            mov              r8, r5      ; r4,r2 input, r0,r
                                                            1 output
  103 000000BA FBA2 0104       umull            r0,r1,r2,r4 ; r6,r3 input, r2,r
                                                            3 output
  104 000000BE FBA3 2306       umull            r2,r3,r3,r6
  105 000000C2 4076            eors             r6, r6
  106 000000C4 1852            adds             r2, r1
  107 000000C6 4173            adcs             r3, r6
  108 000000C8 4649            mov              r1, r9
  109 000000CA 4645            mov              r5, r8
  110 000000CC 4680            mov              r8, r0      ; r1,r5 input, r1,r
                                                            0 output
  111 000000CE FBA1 1005       umull            r1,r0,r1,r5
  112 000000D2 4079            eors             r1,r7
  113 000000D4 4078            eors             r0,r7
  114 000000D6 4064            eors             r4, r4
  115 000000D8 107F            asrs             r7, r7, #1
  116 000000DA 4151            adcs             r1, r2
  117 000000DC 4142            adcs             r2, r0
  118 000000DE 4167            adcs             r7, r4
  119 000000E0 4640            mov              r0, r8
  120 000000E2 1809            adds             r1, r0
  121 000000E4 415A            adcs             r2, r3



ARM Macro Assembler    Page 4 


  122 000000E6 417B            adcs             r3, r7
  123 000000E8 4654            mov              r4, r10
  124 000000EA 465D            mov              r5, r11
  125 000000EC 4076            eors             r6, r6
  126 000000EE 1900            adds             r0, r4
  127 000000F0 4169            adcs             r1, r5
  128 000000F2 4172            adcs             r2, r6
  129 000000F4 4173            adcs             r3, r6
  130 000000F6 4692            mov              r10, r2
  131 000000F8 469B            mov              r11, r3
  132 000000FA BC3C            pop              {r2-r5}
  133 000000FC B403            push             {r0, r1}
  134 000000FE 462E            mov              r6, r5
  135 00000100 4611            mov              r1, r2
  136 00000102 1B2D            subs             r5, r4
  137 00000104 4180            sbcs             r0, r0
  138 00000106 4045            eors             r5, r0
  139 00000108 1A2D            subs             r5, r0
  140 0000010A 1AC9            subs             r1, r3
  141 0000010C 41BF            sbcs             r7, r7
  142 0000010E 4079            eors             r1, r7
  143 00000110 1BC9            subs             r1, r7
  144 00000112 4047            eors             r7, r0
  145 00000114 4689            mov              r9, r1
  146 00000116 46A8            mov              r8, r5      ; r2,r4 input r0,r1
                                                             output
  147 00000118 FBA2 0104       umull            r0,r1,r2,r4 ; r6,r3 input r2,r3
                                                             output
  148 0000011C FBA3 2306       umull            r2,r3,r3,r6
  149 00000120 4076            eors             r6, r6
  150 00000122 1852            adds             r2, r1
  151 00000124 4173            adcs             r3, r6
  152 00000126 4649            mov              r1, r9
  153 00000128 4645            mov              r5, r8
  154 0000012A 4680            mov              r8, r0      ; r1,r5 input r1,r0
                                                             output
  155 0000012C FBA1 1005       umull            r1,r0 ,r1,r5
  156 00000130 4079            eors             r1,r7
  157 00000132 4078            eors             r0,r7
  158 00000134 4064            eors             r4, r4
  159 00000136 107F            asrs             r7, r7, #1
  160 00000138 4151            adcs             r1, r2
  161 0000013A 4142            adcs             r2, r0
  162 0000013C 4167            adcs             r7, r4
  163 0000013E 4640            mov              r0, r8
  164 00000140 1809            adds             r1, r0
  165 00000142 415A            adcs             r2, r3
  166 00000144 417B            adcs             r3, r7
  167 00000146 BC30            pop              {r4, r5}
  168 00000148 4666            mov              r6, r12
  169 0000014A 4667            mov              r7, r12
  170 0000014C 4070            eors             r0, r6
  171 0000014E 4071            eors             r1, r6
  172 00000150 4072            eors             r2, r6
  173 00000152 4073            eors             r3, r6
  174 00000154 1076            asrs             r6, r6, #1
  175 00000156 4160            adcs             r0, r4
  176 00000158 4169            adcs             r1, r5
  177 0000015A 4154            adcs             r4, r2



ARM Macro Assembler    Page 5 


  178 0000015C 415D            adcs             r5, r3
  179 0000015E 4052            eors             r2, r2
  180 00000160 4156            adcs             r6,r2
  181 00000162 4157            adcs             r7,r2
  182 00000164 BC0C            pop              {r2, r3}
  183 00000166 4690            mov              r8, r2
  184 00000168 4699            mov              r9, r3
  185 0000016A 1812            adds             r2, r0
  186 0000016C 414B            adcs             r3, r1
  187 0000016E 4650            mov              r0, r10
  188 00000170 4659            mov              r1, r11
  189 00000172 4144            adcs             r4, r0
  190 00000174 414D            adcs             r5, r1
  191 00000176 4146            adcs             r6, r0
  192 00000178 414F            adcs             r7, r1
  193 0000017A         ;////////END LOW PART/////////////////////
  194 0000017A BC01            pop              {r0}
  195 0000017C C00C            stm              r0!, {r2,r3}
  196 0000017E BC06            pop              {r1,r2}
  197 00000180 B401            push             {r0}
  198 00000182 B4F0            push             {r4-r7}
  199 00000184 468A            mov              r10, r1
  200 00000186 4693            mov              r11, r2
  201 00000188 C930            ldm              r1!, {r4, r5}
  202 0000018A CA0C            ldm              r2, {r2, r3}
  203 0000018C         ;/////////BEGIN HIGH PART////////////////
  204 0000018C         ; /////////MUL128/////////////
  205 0000018C         ;  //MUL64
  206 0000018C 462E            mov              r6, r5
  207 0000018E 4611            mov              r1, r2
  208 00000190 1B2D            subs             r5, r4
  209 00000192 4180            sbcs             r0, r0
  210 00000194 4045            eors             r5, r0
  211 00000196 1A2D            subs             r5, r0
  212 00000198 1AC9            subs             r1, r3
  213 0000019A 41BF            sbcs             r7, r7
  214 0000019C 4079            eors             r1, r7
  215 0000019E 1BC9            subs             r1, r7
  216 000001A0 4047            eors             r7, r0
  217 000001A2 4689            mov              r9, r1
  218 000001A4 46A8            mov              r8, r5      ; r2,r4 input r0,r1
                                                             output
  219 000001A6 FBA2 0104       umull            r0,r1,r2,r4 ; r3,r6 input r2,r3
                                                             output
  220 000001AA FBA3 2306       umull            r2,r3,r3,r6
  221 000001AE 4076            eors             r6, r6
  222 000001B0 1852            adds             r2, r1
  223 000001B2 4173            adcs             r3, r6
  224 000001B4 4649            mov              r1, r9
  225 000001B6 4645            mov              r5, r8
  226 000001B8 4680            mov              r8, r0      ;r1,r5 input r1,r0 
                                                            output
  227 000001BA FBA1 1005       umull            r1,r0,r1,r5
  228 000001BE 4079            eors             r1,r7
  229 000001C0 4078            eors             r0,r7
  230 000001C2 4064            eors             r4, r4
  231 000001C4 107F            asrs             r7, r7, #1
  232 000001C6 4151            adcs             r1, r2
  233 000001C8 4142            adcs             r2, r0



ARM Macro Assembler    Page 6 


  234 000001CA 4167            adcs             r7, r4
  235 000001CC 4640            mov              r0, r8
  236 000001CE 1809            adds             r1, r0
  237 000001D0 415A            adcs             r2, r3
  238 000001D2 417B            adcs             r3, r7
  239 000001D4 B403            push             {r0,r1}
  240 000001D6 4651            mov              r1, r10
  241 000001D8 4692            mov              r10, r2
  242 000001DA C933            ldm              r1, {r0, r1, r4, r5}
  243 000001DC 4622            mov              r2, r4
  244 000001DE 462F            mov              r7, r5
  245 000001E0 1A12            subs             r2, r0
  246 000001E2 418F            sbcs             r7, r1
  247 000001E4 41B6            sbcs             r6, r6
  248 000001E6 4072            eors             r2, r6
  249 000001E8 4077            eors             r7, r6
  250 000001EA 1B92            subs             r2, r6
  251 000001EC 41B7            sbcs             r7, r6
  252 000001EE B484            push             {r2, r7}
  253 000001F0 465A            mov              r2, r11
  254 000001F2 469B            mov              r11, r3
  255 000001F4 CA0F            ldm              r2, {r0, r1, r2, r3}
  256 000001F6 1A80            subs             r0, r2
  257 000001F8 4199            sbcs             r1, r3
  258 000001FA 41BF            sbcs             r7, r7
  259 000001FC 4078            eors             r0, r7
  260 000001FE 4079            eors             r1, r7
  261 00000200 1BC0            subs             r0, r7
  262 00000202 41B9            sbcs             r1, r7
  263 00000204 4077            eors             r7, r6
  264 00000206 46BC            mov              r12, r7
  265 00000208 B403            push             {r0, r1}
  266 0000020A         ;//MUL64
  267 0000020A 462E            mov              r6, r5
  268 0000020C 4611            mov              r1, r2
  269 0000020E 1B2D            subs             r5, r4
  270 00000210 4180            sbcs             r0, r0
  271 00000212 4045            eors             r5, r0
  272 00000214 1A2D            subs             r5, r0
  273 00000216 1AC9            subs             r1, r3
  274 00000218 41BF            sbcs             r7, r7
  275 0000021A 4079            eors             r1, r7
  276 0000021C 1BC9            subs             r1, r7
  277 0000021E 4047            eors             r7, r0
  278 00000220 4689            mov              r9, r1
  279 00000222 46A8            mov              r8, r5      ; r2,r4 input r0,r1
                                                             output
  280 00000224 FBA2 0104       umull            r0,r1,r2,r4 ; r3,r6 input r2,r3
                                                             output
  281 00000228 FBA3 2306       umull            r2,r3,r3,r6
  282 0000022C 4076            eors             r6, r6
  283 0000022E 1852            adds             r2, r1
  284 00000230 4173            adcs             r3, r6
  285 00000232 4649            mov              r1, r9
  286 00000234 4645            mov              r5, r8
  287 00000236 4680            mov              r8, r0      ; r1,r5 intput r1,r
                                                            0 output
  288 00000238 FBA1 1005       umull            r1,r0,r1,r5
  289 0000023C 4079            eors             r1,r7



ARM Macro Assembler    Page 7 


  290 0000023E 4078            eors             r0,r7
  291 00000240 4064            eors             r4, r4
  292 00000242 107F            asrs             r7, r7, #1
  293 00000244 4151            adcs             r1, r2
  294 00000246 4142            adcs             r2, r0
  295 00000248 4167            adcs             r7, r4
  296 0000024A 4640            mov              r0, r8
  297 0000024C 1809            adds             r1, r0
  298 0000024E 415A            adcs             r2, r3
  299 00000250 417B            adcs             r3, r7
  300 00000252 4654            mov              r4, r10
  301 00000254 465D            mov              r5, r11
  302 00000256 4076            eors             r6, r6
  303 00000258 1900            adds             r0, r4
  304 0000025A 4169            adcs             r1, r5
  305 0000025C 4172            adcs             r2, r6
  306 0000025E 4173            adcs             r3, r6
  307 00000260 4692            mov              r10, r2
  308 00000262 469B            mov              r11, r3
  309 00000264 BC3C            pop              {r2-r5}
  310 00000266 B403            push             {r0, r1}
  311 00000268 462E            mov              r6, r5
  312 0000026A 4611            mov              r1, r2
  313 0000026C 1B2D            subs             r5, r4
  314 0000026E 4180            sbcs             r0, r0
  315 00000270 4045            eors             r5, r0
  316 00000272 1A2D            subs             r5, r0
  317 00000274 1AC9            subs             r1, r3
  318 00000276 41BF            sbcs             r7, r7
  319 00000278 4079            eors             r1, r7
  320 0000027A 1BC9            subs             r1, r7
  321 0000027C 4047            eors             r7, r0
  322 0000027E 4689            mov              r9, r1
  323 00000280 46A8            mov              r8, r5      ; r4,r2 intput r0,r
                                                            1 output
  324 00000282 FBA2 0104       umull            r0,r1,r2,r4 ; r3,r6 input r2,r3
                                                             output
  325 00000286 FBA3 2306       umull            r2,r3,r3,r6
  326 0000028A 4076            eors             r6, r6
  327 0000028C 1852            adds             r2, r1
  328 0000028E 4173            adcs             r3, r6
  329 00000290 4649            mov              r1, r9
  330 00000292 4645            mov              r5, r8
  331 00000294 4680            mov              r8, r0      ; r1,r5 input r1,r0
                                                             output
  332 00000296 FBA1 1005       umull            r1,r0,r1,r5
  333 0000029A 4079            eors             r1,r7
  334 0000029C 4078            eors             r0,r7
  335 0000029E 4064            eors             r4, r4
  336 000002A0 107F            asrs             r7, r7, #1
  337 000002A2 4151            adcs             r1, r2
  338 000002A4 4142            adcs             r2, r0
  339 000002A6 4167            adcs             r7, r4
  340 000002A8 4640            mov              r0, r8
  341 000002AA 1809            adds             r1, r0
  342 000002AC 415A            adcs             r2, r3
  343 000002AE 417B            adcs             r3, r7
  344 000002B0 BC30            pop              {r4, r5}
  345 000002B2 4666            mov              r6, r12



ARM Macro Assembler    Page 8 


  346 000002B4 4667            mov              r7, r12
  347 000002B6 4070            eors             r0, r6
  348 000002B8 4071            eors             r1, r6
  349 000002BA 4072            eors             r2, r6
  350 000002BC 4073            eors             r3, r6
  351 000002BE 1076            asrs             r6, r6, #1
  352 000002C0 4160            adcs             r0, r4
  353 000002C2 4169            adcs             r1, r5
  354 000002C4 4154            adcs             r4, r2
  355 000002C6 415D            adcs             r5, r3
  356 000002C8 4052            eors             r2, r2
  357 000002CA 4156            adcs             r6,r2       ;//0,1
  358 000002CC 4157            adcs             r7,r2
  359 000002CE BC0C            pop              {r2, r3}
  360 000002D0 4690            mov              r8, r2
  361 000002D2 4699            mov              r9, r3
  362 000002D4 1812            adds             r2, r0
  363 000002D6 414B            adcs             r3, r1
  364 000002D8 4650            mov              r0, r10
  365 000002DA 4659            mov              r1, r11
  366 000002DC 4144            adcs             r4, r0
  367 000002DE 414D            adcs             r5, r1
  368 000002E0 4146            adcs             r6, r0
  369 000002E2 414F            adcs             r7, r1
  370 000002E4         ;////////END HIGH PART/////////////////////
  371 000002E4 4640            mov              r0, r8
  372 000002E6 4649            mov              r1, r9
  373 000002E8 46B0            mov              r8, r6
  374 000002EA 46B9            mov              r9, r7
  375 000002EC BCC0            pop              {r6, r7}
  376 000002EE 1980            adds             r0, r6
  377 000002F0 4179            adcs             r1, r7
  378 000002F2 BCC0            pop              {r6, r7}
  379 000002F4 4172            adcs             r2, r6
  380 000002F6 417B            adcs             r3, r7
  381 000002F8 BC80            pop              {r7}
  382 000002FA C70F            stm              r7!, {r0-r3}
  383 000002FC 46BA            mov              r10, r7
  384 000002FE 4040            eors             r0,r0
  385 00000300 4646            mov              r6, r8
  386 00000302 464F            mov              r7, r9
  387 00000304 4144            adcs             r4, r0
  388 00000306 4145            adcs             r5, r0
  389 00000308 4146            adcs             r6, r0
  390 0000030A 4147            adcs             r7, r0
  391 0000030C BC07            pop              {r0,r1,r2}
  392 0000030E 4694            mov              r12, r2
  393 00000310 B4F1            push             {r0, r4-r7}
  394 00000312 C9FF            ldm              r1, {r0-r7}
  395 00000314 1B00            subs             r0, r4
  396 00000316 41A9            sbcs             r1, r5
  397 00000318 41B2            sbcs             r2, r6
  398 0000031A 41BB            sbcs             r3, r7
  399 0000031C 4064            eors             r4, r4
  400 0000031E 41A4            sbcs             r4, r4
  401 00000320 4060            eors             r0, r4
  402 00000322 4061            eors             r1, r4
  403 00000324 4062            eors             r2, r4
  404 00000326 4063            eors             r3, r4



ARM Macro Assembler    Page 9 


  405 00000328 1B00            subs             r0, r4
  406 0000032A 41A1            sbcs             r1, r4
  407 0000032C 41A2            sbcs             r2, r4
  408 0000032E 41A3            sbcs             r3, r4
  409 00000330 4666            mov              r6, r12
  410 00000332 46A4            mov              r12, r4     ;//carry
  411 00000334 4655            mov              r5, r10
  412 00000336 C50F            stm              r5!, {r0-r3}
  413 00000338 46AB            mov              r11, r5
  414 0000033A 4680            mov              r8, r0
  415 0000033C 4689            mov              r9, r1
  416 0000033E CEFF            ldm              r6, {r0-r7}
  417 00000340 1A24            subs             r4, r0
  418 00000342 418D            sbcs             r5, r1
  419 00000344 4196            sbcs             r6, r2
  420 00000346 419F            sbcs             r7, r3
  421 00000348 4040            eors             r0, r0
  422 0000034A 4180            sbcs             r0, r0
  423 0000034C 4044            eors             r4, r0
  424 0000034E 4045            eors             r5, r0
  425 00000350 4046            eors             r6, r0
  426 00000352 4047            eors             r7, r0
  427 00000354 1A24            subs             r4, r0
  428 00000356 4185            sbcs             r5, r0
  429 00000358 4186            sbcs             r6, r0
  430 0000035A 4187            sbcs             r7, r0
  431 0000035C 4661            mov              r1, r12
  432 0000035E 4048            eors             r0, r1
  433 00000360 4659            mov              r1, r11
  434 00000362 C1F0            stm              r1!, {r4-r7}
  435 00000364 B401            push             {r0}
  436 00000366 4642            mov              r2, r8
  437 00000368 464B            mov              r3, r9
  438 0000036A         ;/////////BEGIN MIDDLE PART////////////////
  439 0000036A         ; /////////MUL128/////////////
  440 0000036A         ;  //MUL64
  441 0000036A 462E            mov              r6, r5
  442 0000036C 4611            mov              r1, r2
  443 0000036E 1B2D            subs             r5, r4
  444 00000370 4180            sbcs             r0, r0
  445 00000372 4045            eors             r5, r0
  446 00000374 1A2D            subs             r5, r0
  447 00000376 1AC9            subs             r1, r3
  448 00000378 41BF            sbcs             r7, r7
  449 0000037A 4079            eors             r1, r7
  450 0000037C 1BC9            subs             r1, r7
  451 0000037E 4047            eors             r7, r0
  452 00000380 4689            mov              r9, r1
  453 00000382 46A8            mov              r8, r5      ; r2,r4 input r0,r1
                                                             output
  454 00000384 FBA2 0104       umull            r0,r1,r2,r4 ; r3,r6 input r2,r3
                                                             output
  455 00000388 FBA3 2306       umull            r2,r3,r3,r6
  456 0000038C 4076            eors             r6, r6
  457 0000038E 1852            adds             r2, r1
  458 00000390 4173            adcs             r3, r6
  459 00000392 4649            mov              r1, r9
  460 00000394 4645            mov              r5, r8
  461 00000396 4680            mov              r8, r0      ; r1,r5 input r1,r0



ARM Macro Assembler    Page 10 


                                                             output
  462 00000398 FBA1 1005       umull            r1,r0,r1,r5
  463 0000039C 4079            eors             r1,r7
  464 0000039E 4078            eors             r0,r7
  465 000003A0 4064            eors             r4, r4
  466 000003A2 107F            asrs             r7, r7, #1
  467 000003A4 4151            adcs             r1, r2
  468 000003A6 4142            adcs             r2, r0
  469 000003A8 4167            adcs             r7, r4
  470 000003AA 4640            mov              r0, r8
  471 000003AC 1809            adds             r1, r0
  472 000003AE 415A            adcs             r2, r3
  473 000003B0 417B            adcs             r3, r7
  474 000003B2 B403            push             {r0,r1}
  475 000003B4 4651            mov              r1, r10
  476 000003B6 4692            mov              r10, r2
  477 000003B8 C933            ldm              r1, {r0, r1, r4, r5}
  478 000003BA 4622            mov              r2, r4
  479 000003BC 462F            mov              r7, r5
  480 000003BE 1A12            subs             r2, r0
  481 000003C0 418F            sbcs             r7, r1
  482 000003C2 41B6            sbcs             r6, r6
  483 000003C4 4072            eors             r2, r6
  484 000003C6 4077            eors             r7, r6
  485 000003C8 1B92            subs             r2, r6
  486 000003CA 41B7            sbcs             r7, r6
  487 000003CC B484            push             {r2, r7}
  488 000003CE 465A            mov              r2, r11
  489 000003D0 469B            mov              r11, r3
  490 000003D2 CA0F            ldm              r2, {r0, r1, r2, r3}
  491 000003D4 1A80            subs             r0, r2
  492 000003D6 4199            sbcs             r1, r3
  493 000003D8 41BF            sbcs             r7, r7
  494 000003DA 4078            eors             r0, r7
  495 000003DC 4079            eors             r1, r7
  496 000003DE 1BC0            subs             r0, r7
  497 000003E0 41B9            sbcs             r1, r7
  498 000003E2 4077            eors             r7, r6
  499 000003E4 46BC            mov              r12, r7
  500 000003E6 B403            push             {r0, r1}
  501 000003E8         ;//MUL64
  502 000003E8 462E            mov              r6, r5
  503 000003EA 4611            mov              r1, r2
  504 000003EC 1B2D            subs             r5, r4
  505 000003EE 4180            sbcs             r0, r0
  506 000003F0 4045            eors             r5, r0
  507 000003F2 1A2D            subs             r5, r0
  508 000003F4 1AC9            subs             r1, r3
  509 000003F6 41BF            sbcs             r7, r7
  510 000003F8 4079            eors             r1, r7
  511 000003FA 1BC9            subs             r1, r7
  512 000003FC 4047            eors             r7, r0
  513 000003FE 4689            mov              r9, r1
  514 00000400 46A8            mov              r8, r5      ; r4,r2 input r0,r1
                                                             output
  515 00000402 FBA2 0104       umull            r0,r1,r2,r4 ; r3,r6 input r2,r3
                                                             output
  516 00000406 FBA3 2306       umull            r2,r3,r3,r6
  517 0000040A 4076            eors             r6, r6



ARM Macro Assembler    Page 11 


  518 0000040C 1852            adds             r2, r1
  519 0000040E 4173            adcs             r3, r6
  520 00000410 4649            mov              r1, r9
  521 00000412 4645            mov              r5, r8
  522 00000414 4680            mov              r8, r0      ; r1,r5 input r1,r0
                                                             output
  523 00000416 FBA1 1005       umull            r1,r0,r1,r5
  524 0000041A 4079            eors             r1,r7
  525 0000041C 4078            eors             r0,r7
  526 0000041E 4064            eors             r4, r4
  527 00000420 107F            asrs             r7, r7, #1
  528 00000422 4151            adcs             r1, r2
  529 00000424 4142            adcs             r2, r0
  530 00000426 4167            adcs             r7, r4
  531 00000428 4640            mov              r0, r8
  532 0000042A 1809            adds             r1, r0
  533 0000042C 415A            adcs             r2, r3
  534 0000042E 417B            adcs             r3, r7
  535 00000430 4654            mov              r4, r10
  536 00000432 465D            mov              r5, r11
  537 00000434 4076            eors             r6, r6
  538 00000436 1900            adds             r0, r4
  539 00000438 4169            adcs             r1, r5
  540 0000043A 4172            adcs             r2, r6
  541 0000043C 4173            adcs             r3, r6
  542 0000043E 4692            mov              r10, r2
  543 00000440 469B            mov              r11, r3
  544 00000442 BC3C            pop              {r2-r5}
  545 00000444 B403            push             {r0, r1}
  546 00000446 462E            mov              r6, r5
  547 00000448 4611            mov              r1, r2
  548 0000044A 1B2D            subs             r5, r4
  549 0000044C 4180            sbcs             r0, r0
  550 0000044E 4045            eors             r5, r0
  551 00000450 1A2D            subs             r5, r0
  552 00000452 1AC9            subs             r1, r3
  553 00000454 41BF            sbcs             r7, r7
  554 00000456 4079            eors             r1, r7
  555 00000458 1BC9            subs             r1, r7
  556 0000045A 4047            eors             r7, r0
  557 0000045C 4689            mov              r9, r1
  558 0000045E 46A8            mov              r8, r5      ; r2,r4 input r0,r1
                                                             output
  559 00000460 FBA2 0104       umull            r0,r1,r2,r4 ; r3,r6 input r2,r3
                                                             output
  560 00000464 FBA3 2306       umull            r2,r3,r3,r6
  561 00000468 4076            eors             r6, r6
  562 0000046A 1852            adds             r2, r1
  563 0000046C 4173            adcs             r3, r6
  564 0000046E 4649            mov              r1, r9
  565 00000470 4645            mov              r5, r8
  566 00000472 4680            mov              r8, r0      ; r1,r5 input r1,r0
                                                             output
  567 00000474 FBA1 1005       umull            r1,r0,r1,r5
  568 00000478 4079            eors             r1,r7
  569 0000047A 4078            eors             r0,r7
  570 0000047C 4064            eors             r4, r4
  571 0000047E 107F            asrs             r7, r7, #1
  572 00000480 4151            adcs             r1, r2



ARM Macro Assembler    Page 12 


  573 00000482 4142            adcs             r2, r0
  574 00000484 4167            adcs             r7, r4
  575 00000486 4640            mov              r0, r8
  576 00000488 1809            adds             r1, r0
  577 0000048A 415A            adcs             r2, r3
  578 0000048C 417B            adcs             r3, r7
  579 0000048E BC30            pop              {r4, r5}
  580 00000490 4666            mov              r6, r12
  581 00000492 4667            mov              r7, r12
  582 00000494 4070            eors             r0, r6
  583 00000496 4071            eors             r1, r6
  584 00000498 4072            eors             r2, r6
  585 0000049A 4073            eors             r3, r6
  586 0000049C 1076            asrs             r6, r6, #1
  587 0000049E 4160            adcs             r0, r4
  588 000004A0 4169            adcs             r1, r5
  589 000004A2 4154            adcs             r4, r2
  590 000004A4 415D            adcs             r5, r3
  591 000004A6 4052            eors             r2, r2
  592 000004A8 4156            adcs             r6,r2       ;//0,1
  593 000004AA 4157            adcs             r7,r2
  594 000004AC BC0C            pop              {r2, r3}
  595 000004AE 4690            mov              r8, r2
  596 000004B0 4699            mov              r9, r3
  597 000004B2 1812            adds             r2, r0
  598 000004B4 414B            adcs             r3, r1
  599 000004B6 4650            mov              r0, r10
  600 000004B8 4659            mov              r1, r11
  601 000004BA 4144            adcs             r4, r0
  602 000004BC 414D            adcs             r5, r1
  603 000004BE 4146            adcs             r6, r0
  604 000004C0 414F            adcs             r7, r1
  605 000004C2         ;//////////END MIDDLE PART////////////////
  606 000004C2 BC03            pop              {r0,r1}     ;//r0,r1
  607 000004C4 4684            mov              r12, r0     ;//negative
  608 000004C6 4042            eors             r2, r0
  609 000004C8 4043            eors             r3, r0
  610 000004CA 4044            eors             r4, r0
  611 000004CC 4045            eors             r5, r0
  612 000004CE 4046            eors             r6, r0
  613 000004D0 4047            eors             r7, r0
  614 000004D2 B4F0            push             {r4-r7}
  615 000004D4 C9F0            ldm              r1!, {r4-r7}
  616 000004D6 468B            mov              r11, r1     ;//reference
  617 000004D8 4649            mov              r1, r9
  618 000004DA 4041            eors             r1, r0
  619 000004DC 46A2            mov              r10, r4
  620 000004DE 4644            mov              r4, r8
  621 000004E0 1040            asrs             r0, #1
  622 000004E2 4060            eors             r0, r4
  623 000004E4 4654            mov              r4, r10
  624 000004E6 4160            adcs             r0, r4
  625 000004E8 4169            adcs             r1, r5
  626 000004EA 4172            adcs             r2, r6
  627 000004EC 417B            adcs             r3, r7
  628 000004EE 4064            eors             r4, r4
  629 000004F0 4164            adcs             r4, r4
  630 000004F2 46A2            mov              r10, r4     ;//carry
  631 000004F4 465C            mov              r4, r11



ARM Macro Assembler    Page 13 


  632 000004F6 CCF0            ldm              r4, {r4-r7}
  633 000004F8 1900            adds             r0, r4
  634 000004FA 4169            adcs             r1, r5
  635 000004FC 4172            adcs             r2, r6
  636 000004FE 417B            adcs             r3, r7
  637 00000500 46A1            mov              r9, r4
  638 00000502 465C            mov              r4, r11
  639 00000504 C40F            stm              r4!, {r0-r3}
  640 00000506 46A3            mov              r11, r4
  641 00000508 BC0F            pop              {r0-r3}
  642 0000050A 464C            mov              r4, r9
  643 0000050C 4144            adcs             r4, r0
  644 0000050E 414D            adcs             r5, r1
  645 00000510 4156            adcs             r6, r2
  646 00000512 415F            adcs             r7, r3
  647 00000514 2100            movs             r1, #0
  648 00000516 4149            adcs             r1, r1
  649 00000518 4650            mov              r0, r10
  650 0000051A 468A            mov              r10, r1     ;//carry
  651 0000051C 1040            asrs             r0, #1
  652 0000051E BC0F            pop              {r0-r3}
  653 00000520 4144            adcs             r4, r0
  654 00000522 414D            adcs             r5, r1
  655 00000524 4156            adcs             r6, r2
  656 00000526 415F            adcs             r7, r3
  657 00000528 4680            mov              r8, r0
  658 0000052A 4658            mov              r0, r11
  659 0000052C C0F0            stm              r0!, {r4-r7}
  660 0000052E 4683            mov              r11, r0
  661 00000530 4640            mov              r0, r8
  662 00000532 4666            mov              r6, r12
  663 00000534 4655            mov              r5, r10
  664 00000536 4064            eors             r4, r4
  665 00000538 4175            adcs             r5, r6
  666 0000053A 4166            adcs             r6, r4
  667 0000053C 1940            adds             r0, r5
  668 0000053E 4171            adcs             r1, r6
  669 00000540 4172            adcs             r2, r6
  670 00000542 4173            adcs             r3, r6
  671 00000544 465F            mov              r7, r11
  672 00000546 C70F            stm              r7!, {r0-r3}
  673 00000548 BC78            pop              {r3-r6}
  674 0000054A 4698            mov              r8, r3
  675 0000054C 46A1            mov              r9, r4
  676 0000054E 46AA            mov              r10, r5
  677 00000550 46B3            mov              r11, r6
  678 00000552 BDF0            pop              {r4-r7,pc}
  679 00000554 4770            BX               lr
  680 00000556         
  681 00000556                 ENDP
  682 00000556         
  683 00000556                 END
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\mul
.d -o.\mul.o -IC:\Users\tuanl\Documents\unision\crypto_new_c\crypto_new_c\RTE -
IF:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\T
M4C_DFP\1.1.0 -IF:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 
--list=.\mul.lst mul.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.test1 00000000

Symbol: .test1
   Definitions
      At line 1 in file mul.s
   Uses
      None
Comment: .test1 unused
multiply256x256_asm 00000000

Symbol: multiply256x256_asm
   Definitions
      At line 5 in file mul.s
   Uses
      At line 3 in file mul.s
Comment: multiply256x256_asm used once
2 symbols
333 symbols in table
